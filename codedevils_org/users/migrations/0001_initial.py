# Generated by Django 3.0.5 on 2020-06-23 00:43

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import localflavor.us.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=30, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Name of User"
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True, db_column="Bio", null=True, verbose_name="About"
                    ),
                ),
                (
                    "dob",
                    models.DateField(
                        blank=True,
                        db_column="DateOfBirth",
                        null=True,
                        verbose_name="Date of birth",
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True,
                        db_column="City",
                        help_text="The city that the user currently resides in",
                        max_length=30,
                        null=True,
                        verbose_name="City",
                    ),
                ),
                (
                    "state",
                    localflavor.us.models.USStateField(
                        blank=True,
                        db_column="State",
                        default="NA",
                        help_text="The state the city resides in (for inside the US only)",
                        max_length=2,
                        null=True,
                        verbose_name="State",
                    ),
                ),
                (
                    "country",
                    django_countries.fields.CountryField(
                        blank=True,
                        db_column="Country",
                        default="--",
                        help_text="The country the city resides in",
                        max_length=2,
                        null=True,
                        verbose_name="Country",
                    ),
                ),
                (
                    "github_username",
                    models.CharField(
                        blank=True,
                        db_column="GithubUsername",
                        help_text="We use this to automatically enroll you in our GitHub projects.",
                        max_length=30,
                        null=True,
                        verbose_name="GitHub Username",
                    ),
                ),
                (
                    "slack_username",
                    models.CharField(
                        blank=True,
                        db_column="SlackUsername",
                        help_text='The user"s slack user name registered on the CodeDevils slack channel',
                        max_length=30,
                        null=True,
                        verbose_name="Slack Username",
                    ),
                ),
                (
                    "twitter_username",
                    models.CharField(
                        blank=True,
                        db_column="TwitterUsername",
                        help_text="Just the username. This username will be appended to the Twitter URL.",
                        max_length=15,
                        null=True,
                        verbose_name="Twitter Username",
                    ),
                ),
                (
                    "instagram_url",
                    models.URLField(
                        blank=True,
                        db_column="InstagramUrl",
                        null=True,
                        verbose_name="Instagram URL",
                    ),
                ),
                (
                    "facebook_url",
                    models.URLField(
                        blank=True,
                        db_column="FacebookUrl",
                        null=True,
                        verbose_name="Facebook URL",
                    ),
                ),
                (
                    "linkedin_url",
                    models.URLField(
                        blank=True,
                        db_column="LinkedInUrl",
                        null=True,
                        verbose_name="LinkedIn URL",
                    ),
                ),
                (
                    "receive_notifications",
                    models.BooleanField(
                        db_column="ReceiveNotifications",
                        default=False,
                        help_text="Receive emails about the latest and greatest at CodeDevils!",
                        verbose_name="Receive notifications",
                    ),
                ),
                (
                    "anonymous",
                    models.BooleanField(
                        db_column="IsAnonymous",
                        default=True,
                        help_text="You have the option of keeping your account anonymous with CD. Selectingthis will ensure your account stays private and supported applications don't have access to your data",
                        verbose_name="Anonymous",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[("objects", django.contrib.auth.models.UserManager()),],
        ),
        migrations.CreateModel(
            name="OfficerPosition",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_column="Name",
                        help_text="Name of the position",
                        max_length=40,
                        unique=True,
                        verbose_name="Name",
                    ),
                ),
                (
                    "order",
                    models.PositiveSmallIntegerField(
                        db_column="Order",
                        help_text="The order of precedence of the position. For example, the President is 1, Vice President is 2, and so on.",
                        verbose_name="Order",
                    ),
                ),
                (
                    "sds_position",
                    models.CharField(
                        blank=True,
                        db_column="SDSPosition",
                        help_text="The name of the officer position as it is registered on SunDevilSync",
                        max_length=32,
                        null=True,
                        verbose_name="SunDevilSync Position",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        db_column="OfficerEmail",
                        help_text="The email address associated to the Officer position",
                        max_length=254,
                        null=True,
                        verbose_name="Email",
                    ),
                ),
            ],
            options={
                "verbose_name": "Officer position",
                "verbose_name_plural": "Officer positions",
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="Officer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "personal_email",
                    models.EmailField(
                        blank=True,
                        db_column="PersonalEmail",
                        help_text="The email address belonging to the student (generally <first name>.<last name>@codedevils.org)",
                        max_length=254,
                        null=True,
                        verbose_name="Personal email",
                    ),
                ),
                (
                    "quote",
                    models.TextField(
                        blank=True,
                        db_column="Quote",
                        help_text="A cliche quote that truly defines who this being is",
                        null=True,
                        verbose_name="Quote",
                    ),
                ),
                (
                    "position",
                    models.ForeignKey(
                        db_column="Position",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="users.OfficerPosition",
                        verbose_name="Position",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        db_column="UserID",
                        help_text="The holder the position",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Officer",
                "verbose_name_plural": "Officers",
                "db_table": "officer",
                "ordering": ["position"],
                "managed": True,
            },
        ),
    ]
